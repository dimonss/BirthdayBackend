import TelegramBot from 'node-telegram-bot-api';
import * as fs from 'fs';
import * as path from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import * as dotenv from 'dotenv';

// Load environment variables
dotenv.config();

// Get current directory for ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// File size limits in bytes
const PHOTO_SIZE_LIMIT = 500 * 1024; // 500KB
const AUDIO_SIZE_LIMIT = 1024 * 1024; // 1MB

// Get environment variables
const BOT_TOKEN = process.env.BOT_TOKEN;
const USER_PAGE_URL = process.env.USER_PAGE_URL;
const PAGES_DIR = process.env.PAGES_DIR;

if (!BOT_TOKEN) {
    throw new Error('BOT_TOKEN is not defined in environment variables');
}

if (!USER_PAGE_URL) {
    throw new Error('USER_PAGE_URL is not defined in environment variables');
}

if (!PAGES_DIR) {
    throw new Error('PAGES_DIR is not defined in environment variables');
}

// Telegram API URL
const TELEGRAM_API_URL = `https://api.telegram.org/file/bot${BOT_TOKEN}`;

// Initialize bot with your token
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// Set bot commands
bot.setMyCommands([
    { command: '/start', description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },
    { command: '/help', description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É' },
    { command: '/status', description: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è' },
    { command: '/delete', description: '–£–¥–∞–ª–∏—Ç—å –≤–∞—à–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ' }
]);

// Create pages directory if it doesn't exist
if (!fs.existsSync(PAGES_DIR)) {
    fs.mkdirSync(PAGES_DIR);
}

// Function to copy HTML template
const copyHtmlTemplate = (userDir: string) => {
    const templatePath = path.join(__dirname, '..', 'htmlTemplates', 'indexFirst.html');
    const targetPath = path.join(userDir, 'indexFirst.html');
    
    // Check if indexFirst.html already exists
    if (!fs.existsSync(targetPath)) {
        fs.copyFileSync(templatePath, targetPath);
    }
};

// Function to check if user has both photo and audio
const checkUserFiles = (userDir: string): boolean => {
    const photoPath = path.join(userDir, 'img.jpg');
    const audioPath = path.join(userDir, 'audio.mp3');
    return fs.existsSync(photoPath) && fs.existsSync(audioPath);
};

// Function to send user's page link
const sendUserPageLink = async (chatId: number, username: string) => {
    const userPageUrl = `${USER_PAGE_URL}/${username}`;
    await bot.sendMessage(
        chatId,
        `–í–∞—à–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ–º –≥–æ—Ç–æ–≤–∞!\n\n` +
        `–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—ë –ø–æ —Å—Å—ã–ª–∫–µ:\n${userPageUrl}\n\n` +
        `–í—ã –º–æ–∂–µ—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ—ë –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∞—É–¥–∏–æ.`
    );
};

// Function to format file size
const formatFileSize = (bytes: number): string => {
    if (bytes < 1024) return bytes + ' B';
    if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + ' KB';
    return (bytes / (1024 * 1024)).toFixed(1) + ' MB';
};

// Handle /start command
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const username = msg.from?.username;

    if (!username) {
        await bot.sendMessage(
            chatId,
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã\n\n' +
            '–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.\n\n' +
            '–ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å username:\n' +
            '1. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram\n' +
            '2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"\n' +
            '3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–ª–µ "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"\n' +
            '4. –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π username\n' +
            '5. –ù–∞–∂–º–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"\n\n' +
            '–ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ username, –Ω–∞–ø–∏—à–∏—Ç–µ /start —Å–Ω–æ–≤–∞.'
        );
        return;
    }

    const userDir = path.join(PAGES_DIR, username);
    const hasFiles = fs.existsSync(userDir) && checkUserFiles(userDir);

    await bot.sendMessage(
        chatId,
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã\n\n' +
        '–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è!\n\n' +
        '–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n' +
        '1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –≤–∞—à–µ–≥–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è\n' +
        '2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–∏–º–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏\n' +
        '3. –ü–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ–º\n\n' +
        (hasFiles 
            ? '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –≥–æ—Ç–æ–≤–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ! –í—ã –º–æ–∂–µ—Ç–µ:\n' +
              '‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –ø–æ —Å—Å—ã–ª–∫–µ: ' + `${USER_PAGE_URL}/${username}\n` +
              '‚Ä¢ –û–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ, –æ—Ç–ø—Ä–∞–≤–∏–≤ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∞—É–¥–∏–æ'
            : '–ù–∞—á–Ω–∏—Ç–µ —Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –∏–ª–∏ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏—è!')
    );
});

// Handle incoming messages
bot.on('message', async (msg: any) => {
    const chatId = msg.chat.id;
    const username = msg.from?.username;

    // Check if user has a username
    if (!username) {
        await bot.sendMessage(
            chatId,
            '–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.\n\n' +
            '–ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å username:\n' +
            '1. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram\n' +
            '2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"\n' +
            '3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–ª–µ "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"\n' +
            '4. –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π username\n' +
            '5. –ù–∞–∂–º–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"\n\n' +
            '–ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ username, –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ –∏ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏—è.'
        );
        return;
    }

    const userDir = path.join(PAGES_DIR, username);

    // Create user directory if it doesn't exist
    if (!fs.existsSync(userDir)) {
        fs.mkdirSync(userDir);
    }

    // Handle photo messages
    if (msg.photo) {
        try {
            // Get the largest photo
            const photo = msg.photo[msg.photo.length - 1];
            
            // Check file size
            if (photo.file_size > PHOTO_SIZE_LIMIT) {
                await bot.sendMessage(
                    chatId,
                    `–†–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–π –ª–∏–º–∏—Ç (${formatFileSize(PHOTO_SIZE_LIMIT)}). ` +
                    `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.`
                );
                return;
            }

            const fileId = photo.file_id;
            
            // Get file path from Telegram
            const file = await bot.getFile(fileId);
            const filePath = file.file_path;
            
            // Download the file
            const photoUrl = `${TELEGRAM_API_URL}/${filePath}`;
            const response = await fetch(photoUrl);
            const buffer = await response.arrayBuffer();
            
            // Save the file
            const photoPath = path.join(userDir, 'img.jpg');
            fs.writeFileSync(photoPath, Buffer.from(buffer));
            
            await bot.sendMessage(chatId, '–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!');
            
            // Check if user has both files and send link if they do
            if (checkUserFiles(userDir)) {
                copyHtmlTemplate(userDir);
                await sendUserPageLink(chatId, username);
            } else {
                await bot.sendMessage(
                    chatId,
                    '–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤–∞—à–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ!'
                );
            }
        } catch (error) {
            console.error('Error saving photo:', error);
            await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
    }

    // Handle audio messages
    if (msg.audio || msg.voice) {
        try {
            const audioData = msg.audio || msg.voice;
            
            // Check file size
            if (audioData.file_size > AUDIO_SIZE_LIMIT) {
                await bot.sendMessage(
                    chatId,
                    `–†–∞–∑–º–µ—Ä –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–π –ª–∏–º–∏—Ç (${formatFileSize(AUDIO_SIZE_LIMIT)}). ` +
                    `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.`
                );
                return;
            }

            const fileId = audioData.file_id;
            
            // Get file path from Telegram
            const file = await bot.getFile(fileId);
            const filePath = file.file_path;
            
            // Download the file
            const audioUrl = `${TELEGRAM_API_URL}/${filePath}`;
            const response = await fetch(audioUrl);
            const buffer = await response.arrayBuffer();
            
            // Save the file
            const audioPath = path.join(userDir, 'audio.mp3');
            fs.writeFileSync(audioPath, Buffer.from(buffer));
            
            await bot.sendMessage(chatId, '–ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!');
            
            // Check if user has both files and send link if they do
            if (checkUserFiles(userDir)) {
                copyHtmlTemplate(userDir);
                await sendUserPageLink(chatId, username);
            } else {
                await bot.sendMessage(
                    chatId,
                    '–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤–∞—à–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ!'
                );
            }
        } catch (error) {
            console.error('Error saving audio:', error);
            await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞—É–¥–∏–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
    }
});

// Handle /help command
bot.onText(/\/help/, async (msg) => {
    const chatId = msg.chat.id;
    await bot.sendMessage(
        chatId,
        'üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n' +
        '1. /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n' +
        '2. /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n' +
        '3. /status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è\n' +
        '4. /delete - –£–¥–∞–ª–∏—Ç—å –≤–∞—à–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ\n\n' +
        '–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ:\n' +
        '1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ (–¥–æ 500KB)\n' +
        '2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–æ 1MB)\n' +
        '3. –ü–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à—É —Å—Ç—Ä–∞–Ω–∏—Ü—É\n\n' +
        '–í—ã –º–æ–∂–µ—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ—ë –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –æ—Ç–ø—Ä–∞–≤–∏–≤ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∞—É–¥–∏–æ.'
    );
});

// Handle /status command
bot.onText(/\/status/, async (msg) => {
    const chatId = msg.chat.id;
    const username = msg.from?.username;

    if (!username) {
        await bot.sendMessage(
            chatId,
            '–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.'
        );
        return;
    }

    const userDir = path.join(PAGES_DIR, username);
    const hasPhoto = fs.existsSync(path.join(userDir, 'img.jpg'));
    const hasAudio = fs.existsSync(path.join(userDir, 'audio.mp3'));

    let statusMessage = 'üìä –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è:\n\n';
    statusMessage += `–§–æ—Ç–æ: ${hasPhoto ? '‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n`;
    statusMessage += `–ê—É–¥–∏–æ: ${hasAudio ? '‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n`;

    if (hasPhoto && hasAudio) {
        statusMessage += `–í–∞—à–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!\n–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ –∑–¥–µ—Å—å:\n${USER_PAGE_URL}/${username}`;
    } else {
        statusMessage += '–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–∞ —Ñ–∞–π–ª–∞.';
    }

    await bot.sendMessage(chatId, statusMessage);
});

// Handle /delete command
bot.onText(/\/delete/, async (msg) => {
    const chatId = msg.chat.id;
    const username = msg.from?.username;

    if (!username) {
        await bot.sendMessage(
            chatId,
            '–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.'
        );
        return;
    }

    const userDir = path.join(PAGES_DIR, username);
    
    if (!fs.existsSync(userDir)) {
        await bot.sendMessage(chatId, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.');
        return;
    }

    try {
        fs.rmSync(userDir, { recursive: true, force: true });
        await bot.sendMessage(
            chatId,
            '‚úÖ –í–∞—à–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.\n–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Ñ–æ—Ç–æ –∏ –∞—É–¥–∏–æ.'
        );
    } catch (error) {
        console.error('Error deleting user directory:', error);
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

console.log('Bot is running...');
